<shrimp name="new_scene">
	<about/>
	<network>
		<block id="Add_10" position_x="11" position_y="9" author="rconstruct">
			<input name="A" type="color" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Add_9" output="val"/>
			</input>
			<input name="B" type="color" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="Environment" output="value"/>
			</input>
			<output name="val" type="color" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																					</usage>
		</block>
		<block id="Add_11" position_x="-5" position_y="2" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Voronoi3D2F_2" output="f1"/>
			</input>
			<input name="B" type="float" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="Voronoi3D2F_4" output="f1"/>
			</input>
			<output name="val" type="float" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																					</usage>
		</block>
		<block id="Add_12" position_x="-5" position_y="1" author="rconstruct">
			<input name="A" type="point" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Voronoi3D2F_2" output="pos1"/>
			</input>
			<input name="B" type="point" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="Voronoi3D2F_4" output="pos1"/>
			</input>
			<output name="val" type="point" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																					</usage>
		</block>
		<block id="Add_13" position_x="-5" position_y="-0" author="rconstruct">
			<input name="A" type="point" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Voronoi3D2F_2" output="pos2"/>
			</input>
			<input name="B" type="point" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="Voronoi3D2F_4" output="pos2"/>
			</input>
			<output name="val" type="point" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																					</usage>
		</block>
		<block id="Add_14" position_x="-5" position_y="-1" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Voronoi3D2F_2" output="f2"/>
			</input>
			<input name="B" type="float" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="Voronoi3D2F_4" output="f2"/>
			</input>
			<output name="val" type="float" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																					</usage>
		</block>
		<block id="Add_8" position_x="-10" position_y="0" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Ridged3D_2" output="val"/>
			</input>
			<input name="B" type="float" storage="varying" multi="+" value=".8" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="float" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																					</usage>
		</block>
		<block id="Add_9" position_x="8" position_y="10" author="rconstruct">
			<input name="A" type="color" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="PhongBlinn" output="Ci"/>
			</input>
			<input name="B" type="color" storage="varying" multi="+" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="OrenNayar_2" output="Ci"/>
			</input>
			<output name="val" type="color" storage="varying" description="val = A + B"/>
			<rsl_code>
		$(val) = $(A) + $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Adds 2 or more inputs. All the input pads will inherit the type of the output pad.																					</usage>
		</block>
		<block id="Bump_2" position_x="3" position_y="3" author="rconstruct">
			<input name="P" type="point" storage="varying" value="P" description="The surface point to be bumped"/>
			<input name="Dir" type="normal" storage="varying" value="normalize(N)" description="The surface normal" type_parent="NN"/>
			<input name="Scale" type="float" storage="varying" value="0.5" description="Amplitude of the bumping">
				<connection parent="Multiply_10" output="val"/>
			</input>
			<output name="NN" type="normal" storage="varying" description="The new surface normal"/>
			<rsl_code>
		$(NN) = normalize( calculatenormal( $(P) + $(Dir) * $(Scale)));
																						</rsl_code>
			<rsl_include/>
			<usage>This is exactly like the displace function except that the new surface position is not computed. Calculates the normal of a position &quot;P&quot; displaced by amount &quot;Scale&quot; in direction &quot;Dir&quot;.																					</usage>
		</block>
		<block id="CellContour_2" position_x="-2" position_y="2" author="rconstruct">
			<input name="p1" type="point" storage="varying" value="point(0)" description="First point position">
				<connection parent="Add_12" output="val"/>
			</input>
			<input name="p2" type="point" storage="varying" value="point(1)" description="Second point position">
				<connection parent="Add_13" output="val"/>
			</input>
			<input name="f1" type="float" storage="varying" value="0" description="Primary feature">
				<connection parent="Divide_5" output="val"/>
			</input>
			<input name="f2" type="float" storage="varying" value="1" description="Secondary feature">
				<connection parent="Divide_6" output="val"/>
			</input>
			<input name="lthick" type="float" storage="varying" value="5" description="Contour line thickness"/>
			<input name="P" type="point" storage="varying" value="P" description="Surface point"/>
			<output name="val" type="float" storage="varying" description="Output value"/>
			<rsl_code>
		$(val) = step( $(lthick) * (
					distance( $(p1), $(p2) ) / (
					distance( $(p1), $(P) ) + distance( $(P), $(p2) ) ) ) ,
					$(f2) - $(f1) );
																						</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h																					</rsl_include>
			<usage>This function generates contour lines on shaded cells.																					</usage>
		</block>
		<block id="Constant_5" position_x="-8" position_y="9" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .7, .33, .23 )" description="Input" type_parent="out"/>
			<output name="out" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(out) = $(in);
																						</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																					</usage>
		</block>
		<block id="Constant_6" position_x="-8" position_y="8" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .73, .42, .27 )" description="Input" type_parent="out"/>
			<output name="out" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(out) = $(in);
																						</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																					</usage>
		</block>
		<block id="Constant_7" position_x="-8" position_y="7" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .73, .51, .34 )" description="Input" type_parent="out"/>
			<output name="out" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(out) = $(in);
																						</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																					</usage>
		</block>
		<block id="Constant_8" position_x="-8" position_y="6" author="rconstruct">
			<input name="in" type="color" storage="varying" value="color( .73, .50, .39 )" description="Input" type_parent="out"/>
			<output name="out" type="color" storage="varying" description="Output = Input"/>
			<rsl_code>
		$(out) = $(in);
																						</rsl_code>
			<rsl_include/>
			<usage>Useful for supplying multiple inputs with the same value.																					</usage>
		</block>
		<block id="Divide_4" position_x="2" position_y="11" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Subtract_6" output="val"/>
			</input>
			<input name="B" type="float" storage="varying" value="1" description="2nd input" type_parent="val">
				<connection parent="Subtract_5" output="val"/>
			</input>
			<output name="val" type="float" storage="varying" description="val = A / B"/>
			<rsl_code>
		$(val) = $(A) / $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Divides input A by input B.																					</usage>
		</block>
		<block id="Divide_5" position_x="-5" position_y="3" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Add_11" output="val"/>
			</input>
			<input name="B" type="float" storage="varying" value="2" description="2nd input" type_parent="val"/>
			<output name="val" type="float" storage="varying" description="val = A / B"/>
			<rsl_code>
		$(val) = $(A) / $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Divides input A by input B.																					</usage>
		</block>
		<block id="Divide_6" position_x="-5" position_y="-2" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Add_14" output="val"/>
			</input>
			<input name="B" type="float" storage="varying" value="2" description="2nd input" type_parent="val"/>
			<output name="val" type="float" storage="varying" description="val = A / B"/>
			<rsl_code>
		$(val) = $(A) / $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Divides input A by input B.																					</usage>
		</block>
		<block id="Environment" position_x="9" position_y="7" author="rconstruct">
			<input name="texmap" type="string" storage="uniform" value="&quot;raytrace&quot;" description="Texture map name"/>
			<input name="Kr" type="float" storage="varying" value="1" description="Environment intensity">
				<connection parent="Multiply_7" output="val"/>
			</input>
			<input name="direction" type="vector" storage="varying" value="reflect( I, normalize(N))" description="Direction vector">
				<connection parent="Fresnel_2" output="R"/>
			</input>
			<input name="sblur" type="float" storage="varying" value="0" description="Blur along S"/>
			<input name="tblur" type="float" storage="varying" value="0" description="Blur along T"/>
			<input name="swidth" type="float" storage="uniform" value="1" description="Blur filter width along S"/>
			<input name="twidth" type="float" storage="uniform" value="1" description="Blur filter width along T"/>
			<input name="samples" type="float" storage="uniform" value="4" description="Sampling rate"/>
			<input name="fill" type="float" storage="uniform" value="0" description="Fill value on empty channel"/>
			<input name="filter" type="string" storage="uniform" value="&quot;gaussian&quot;" description="Filter type"/>
			<input name="channel" type="float" storage="varying" value="0" description="Channel, in color textures"/>
			<input name="tint" type="color" storage="varying" value="1" description="Color tint for the environment" type_parent="value"/>
			<input name="label" type="string" storage="uniform" value="&quot;&quot;" description="Ray label"/>
			<input name="subset" type="string" storage="uniform" value="&quot;&quot;" description="Ray subset"/>
			<input name="bias" type="float" storage="uniform" value="-1" description="Ray bias"/>
			<input name="hitmode" type="string" storage="uniform" value="&quot;default&quot;" description="Override hitmode"/>
			<input name="maxdist" type="float" storage="varying" value="15" description="Maximum ray distance"/>
			<input name="coneangle" type="float" storage="varying" value="radians(5)" description="Cone angle"/>
			<input name="expandLDR" type="float" storage="uniform" value="0" description="Expand range of LDR image"/>
			<input name="dynrange" type="float" storage="varying" value="1" description="Maximum value to expand range to"/>
			<input name="startlum" type="float" storage="varying" value="0.5" description="Starting luminance for expansion"/>
			<input name="exponent" type="float" storage="varying" value="2.0" description="Range exponent for falloff"/>
			<output name="value" type="color" storage="varying" description="Output color"/>
			<rsl_code>

	/* make sure options are clear and set them according to shadeop
	 * and renderer */
	#ifdef SHADEOP_ARGUMENTS
	#undef SHADEOP_ARGUMENTS
	#endif
	
    #if RENDERER == pixie
	#define SHADEOP_ARGUMENTS	&quot;filter&quot;, $(filter), \
								/* can&apos;t specify s/tblur */ \
								&quot;blur&quot;, $(sblur), \
								&quot;swidth&quot;, $(swidth), &quot;twidth&quot;, $(twidth), \
								&quot;fill&quot;, $(fill), &quot;samples&quot;, $(samples), \
								&quot;bias&quot;, $(bias), &quot;maxdist&quot;, $(maxdist), \
								&quot;samplecone&quot;, $(coneangle), &quot;label&quot;, $(label)
	#elif RENDERER == _3delight
	#define SHADEOP_ARGUMENTS	&quot;sblur&quot;, $(sblur), &quot;tblur&quot;, $(tblur), \
								&quot;swidth&quot;, $(swidth), &quot;twidth&quot;, $(twidth), \
								&quot;samples&quot;, $(samples), &quot;fill&quot;, $(fill), \
								&quot;filter&quot;, $(filter), &quot;label&quot;, $(label), \
								&quot;subset&quot;, $(subset), &quot;bias&quot;, $(bias), \
								&quot;hitmode&quot;, $(hitmode)
    #elif RENDERER == air
	#define SHADEOP_ARGUMENTS	&quot;bias&quot;, $(bias), \
								/* can&apos;t specify s/blur */ \
								&quot;blur&quot;, $(sblur), &quot;label&quot;, $(label), \
								&quot;maxdist&quot;, $(maxdist), &quot;samples&quot;, $(samples), \
								&quot;subset&quot;, $(subset)
	#else
	#define SHADEOP_ARGUMENTS	&quot;sblur&quot;, $(sblur), &quot;tblur&quot;, $(tblur), \
								&quot;swidth&quot;, $(swidth), &quot;twidth&quot;, $(twidth), \
								&quot;samples&quot;, $(samples), &quot;filter&quot;, $(filter), \
								&quot;fill&quot;, $(fill)
    #endif /* RENDERER */
	
	// LDR expansion, from SIGGRAPH 2002 Course 16,
	// &quot;Production Ready GI&quot;, by Hayden Landis
	#define $(blockname)_expandLDR $(expandLDR)
	#if $(blockname)_expandLDR == 1
		varying $(value:type) $(blockname)_ctmp = $(Kr) * $(tint) *
				$(value:type) environment(	$(texmap)[$(channel)],
											$(direction),
											SHADEOP_ARGUMENTS );
		$(value) = envexpand(	$(blockname)_ctmp, $(dynrange),
								$(startlum), $(exponent) );
	#else // no expansion
	// tint is of float type if output variable is of float type
		$(value) = $(Kr) * $(tint) * $(value:type) environment(
						$(texmap)[$(channel)],
						$(direction),
						SHADEOP_ARGUMENTS );
	#endif // expandLDR
	aov_reflection += $(value);

	#undef $(blockname)_expandLDR
	#undef SHADEOP_ARGUMENTS
	
				</rsl_code>
			<rsl_include>rsl_shrimp_texture.h			</rsl_include>
			<usage>This block returns the texture value from an environment map, for the specified direction vector. If the filename specified is &quot;raytrace&quot; then raytracing is used instead of a texture map. The variables &quot;sblur&quot; and &quot;tblur&quot; specify the blur along the &quot;S&quot; and &quot;T&quot; directions respectively, while &quot;swidth&quot; and &quot;twidth&quot; specify the filter width along the &quot;S&quot; and &quot;T&quot; directions respectively. The filter type can be &quot;box&quot;, &quot;triangle&quot;, or &quot;gaussian&quot;, with &quot;samples&quot; controling the number of samples to use. The starting channel is specified with the &quot;channel&quot; parameter. The type returned can be float, or color, and it is passed to the preset &quot;aov_reflection&quot; AOV. When raytracing is used, extra parameters available to raytracing functions are available, such as &quot;label&quot;, &quot;subset&quot;, &quot;bias&quot; and &quot;hitmode&quot;. Note that this function might vary considerably with each renderer, so please check your renderer&apos;s documentation. This block also implements the LDR expansion from SIGGRAPH 2002 Course 16, &quot;Production Ready GI&quot;, by Hayden Landis, to avoid washed out reflection highlights when using Low Dynamic Range images for reflection maps. When toggling &quot;expandLDR&quot; on/off, the following variables apply to control the expansion: &quot;dynrange&quot;, defines the maximum value to expand the specified region of the map to; &quot;startlum&quot;, defines the starting luminance for the expansion to begin with; &quot;exponent&quot;, defines the exponent for the falloff.			</usage>
		</block>
		<block id="Fresnel_2" position_x="5" position_y="3" author="rconstruct">
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Incident vector">
				<connection parent="Normalize_5" output="val"/>
			</input>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal">
				<connection parent="Normalize_4" output="val"/>
			</input>
			<input name="eta" type="float" storage="varying" value="0.75" description="The relative index of refraction"/>
			<output name="R" type="vector" storage="varying" description="The reflected vector"/>
			<output name="T" type="vector" storage="varying" description="The refracted vector"/>
			<output name="Kr" type="float" storage="varying" description="The reflected coefficient"/>
			<output name="Kt" type="float" storage="varying" description="The refracted coefficient"/>
			<rsl_code>
		/* initialize */
		$(Kr) = 0; $(Kt) = 0; $(R) = vector(0); $(T) = vector(0);
        fresnel( $(I), $(N), $(eta), $(Kr), $(Kt), $(R), $(T) );
																						</rsl_code>
			<rsl_include/>
			<usage>Return the reflection coefficient Kr and the refraction (or transmission) coefficient &quot;Kt&quot;, given an incident direction &quot;I&quot;, the surface normal &quot;N&quot;, and the relative index of refraction &quot;eta&quot;. Eta is the ratio of the index of refraction in the volume containing the incident vector, to that of the volume being entered. These coefficients are computed using the Fresnel formula. This function also returns the reflected &quot;R&quot; and transmitted &quot;T&quot; vectors.																					</usage>
		</block>
		<block id="GetCol_2" position_x="0" position_y="9" author="rconstruct">
			<input name="col" type="color" storage="varying" value="color(0)" description="Color to split into components">
				<connection parent="Mix_10" output="val"/>
			</input>
			<output name="x" type="float" storage="varying" description="1st component"/>
			<output name="y" type="float" storage="varying" description="2nd component"/>
			<output name="z" type="float" storage="varying" description="3rd component"/>
			<rsl_code>
		$(x) = comp( $(col), 0 );
		$(y) = comp( $(col), 1 );
		$(z) = comp( $(col), 2 );
																						</rsl_code>
			<rsl_include/>
			<usage>Gets the components of a color type variable.																					</usage>
		</block>
		<block id="I_2" position_x="3" position_y="-0" author="rconstruct">
			<output name="I" type="vector" storage="varying" description="Incident ray direction"/>
			<rsl_code>
	$(I) = I;
																						</rsl_code>
			<rsl_include/>
			<usage>Incident ray direction. The availability of this global variable for the different shading contexts is renderer specific.																					</usage>
		</block>
		<block id="Mix_10" position_x="0" position_y="7" author="rconstruct">
			<input name="alpha" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="CellContour_2" output="val"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="val">
				<connection parent="Mix_8" output="val"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="val">
				<connection parent="Mix_9" output="val"/>
			</input>
			<output name="val" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(val) = mix( $(A), $(B), $(alpha) );
																						</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values x and y. The types of x and y must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																					</usage>
		</block>
		<block id="Mix_6" position_x="-4" position_y="8" author="rconstruct">
			<input name="alpha" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="Voronoi3D2F_2" output="f1"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="val">
				<connection parent="Constant_5" output="out"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="val">
				<connection parent="Constant_6" output="out"/>
			</input>
			<output name="val" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(val) = mix( $(A), $(B), $(alpha) );
																						</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values x and y. The types of x and y must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																					</usage>
		</block>
		<block id="Mix_7" position_x="-4" position_y="6" author="rconstruct">
			<input name="alpha" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="Voronoi3D2F_4" output="f1"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="val">
				<connection parent="Constant_7" output="out"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="val">
				<connection parent="Constant_8" output="out"/>
			</input>
			<output name="val" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(val) = mix( $(A), $(B), $(alpha) );
																						</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values x and y. The types of x and y must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																					</usage>
		</block>
		<block id="Mix_8" position_x="-2" position_y="8" author="rconstruct">
			<input name="alpha" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="Ridged3D_2" output="val"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="val">
				<connection parent="Mix_6" output="val"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="val">
				<connection parent="Constant_7" output="out"/>
			</input>
			<output name="val" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(val) = mix( $(A), $(B), $(alpha) );
																						</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values x and y. The types of x and y must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																					</usage>
		</block>
		<block id="Mix_9" position_x="-2" position_y="6" author="rconstruct">
			<input name="alpha" type="float" storage="varying" value="0.5" description="The mixing factor">
				<connection parent="Divide_5" output="val"/>
			</input>
			<input name="A" type="color" storage="varying" value="0" description="1st Input" type_parent="val">
				<connection parent="Mix_7" output="val"/>
			</input>
			<input name="B" type="color" storage="varying" value="1" description="2nd Input" type_parent="val">
				<connection parent="Constant_7" output="out"/>
			</input>
			<output name="val" type="color" storage="varying" description="The resulting mix between A and B"/>
			<rsl_code>
		$(val) = mix( $(A), $(B), $(alpha) );
																						</rsl_code>
			<rsl_include/>
			<usage>Mix returns x*(1-a)+y*a, that is, it performs a linear blend between values x and y. The types of x and y must be identical, but may be any of float, point, vector, normal, or color. The variants that operate on colors or point-like objects operate on a component by component basis (e.g: separately for x, y, and z).																					</usage>
		</block>
		<block id="Multiply_10" position_x="1" position_y="1" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="CellContour_2" output="val"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value=".002" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																					</usage>
		</block>
		<block id="Multiply_2" position_x="-10" position_y="3" author="rconstruct">
			<input name="A" type="point" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Transform" output="pp"/>
			</input>
			<input name="B" type="point" storage="varying" multi="*" value="point(.5)" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="point" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																					</usage>
		</block>
		<block id="Multiply_3" position_x="-10" position_y="2" author="rconstruct">
			<input name="A" type="point" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Transform" output="pp"/>
			</input>
			<input name="B" type="point" storage="varying" multi="*" value="point(2)" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="point" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																					</usage>
		</block>
		<block id="Multiply_7" position_x="7" position_y="2" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Subtract" output="val"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="Fresnel_2" output="Kr"/>
			</input>
			<output name="val" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
										</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.									</usage>
		</block>
		<block id="Multiply_9" position_x="4" position_y="9.63232165175573" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Subtract_7" output="val"/>
			</input>
			<input name="B" type="float" storage="varying" multi="*" value="25" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="float" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.																					</usage>
		</block>
		<block id="Normalize_4" position_x="3" position_y="4" author="rconstruct">
			<input name="A" type="normal" storage="varying" value="N" description="Input vector" type_parent="val">
				<connection parent="Bump_2" output="NN"/>
			</input>
			<output name="val" type="normal" storage="varying" description="Output unit length vector"/>
			<rsl_code>
		$(val) = normalize( $(A) );
																						</rsl_code>
			<rsl_include/>
			<usage>Returns a unit vector in the direction of input vector (V/length(V)).																					</usage>
		</block>
		<block id="Normalize_5" position_x="3" position_y="1" author="rconstruct">
			<input name="A" type="vector" storage="varying" value="N" description="Input vector" type_parent="val">
				<connection parent="I_2" output="I"/>
			</input>
			<output name="val" type="vector" storage="varying" description="Output unit length vector"/>
			<rsl_code>
		$(val) = normalize( $(A) );
																						</rsl_code>
			<rsl_include/>
			<usage>Returns a unit vector in the direction of input vector (V/length(V)).																					</usage>
		</block>
		<block id="OrenNayar_2" position_x="6" position_y="8" author="rconstruct">
			<input name="Cdiff" type="color" storage="varying" value="color(.5)" description="Diffuse color">
				<connection parent="Mix_10" output="val"/>
			</input>
			<input name="Kd" type="float" storage="varying" value="0.8" description="Diffuse light coefficient"/>
			<input name="roughness" type="float" storage="varying" value="0.05" description="roughness">
				<connection parent="Subtract_7" output="val"/>
			</input>
			<input name="qualitative" type="float" storage="uniform" value="1" description="Toggle qualitative or full model"/>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal">
				<connection parent="Normalize_4" output="val"/>
			</input>
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Direction of viewer"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light categories accepted"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
	#define use_qualitative_$(qualitative)
		aov_surfacecolor += $(Cdiff);
	
	#ifdef use_qualitative_1
		/* Air&apos;s diffuse can take a roughness parameter, in which */
		/* case behaves as the Oren-Nayar (qualitative?) model */
		#if RENDERER == air
			aov_diffuse += $(Kd) * diffuse( $(N), $(roughness) );
		#else
			aov_diffuse += $(Kd) * OrenNayar(	$(roughness), $(N), $(I),
												$(category) );
		#endif /* RENDERER */
        $(Ci) = aov_surfacecolor * aov_diffuse;
	#else
		aov_diffuse += $(Kd) * LG_OrenNayar( $(Cdiff), $(roughness), $(N),
												$(I), $(category) );
		$(Ci) = aov_diffuse;
	#endif /* use_qualitative_$(qualitative) */
	#undef use_qualitative_$(qualitative)
	
							</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h						</rsl_include>
			<usage>Oren-Nayar diffuse term. This block has both the &quot;qualitative&quot; model based on Szymon Rusinkiewicz&apos;s implementation, and the full model with inter-reflections, based on Larry Gritz&apos;s implementation, depending on the content of the qualitative variable in the block. The roughness parameter controls the standard deviation of angle orientations of the surface grooves, so when roughness = 0, the term is Lambertian. The diffuse color value is passed to the aov_surfacecolor, and the diffuse value to the aov_diffuse AOV presets, only for the qualitative model (see the header for the C3 coefficient and L1 and L2 variables). The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block. The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block.						</usage>
		</block>
		<block id="PhongBlinn" position_x="6" position_y="11.5880829015544" author="rconstruct">
			<input name="Cspec" type="color" storage="varying" value="color(1)" description="Specular color"/>
			<input name="Ks" type="float" storage="varying" value="0.8" description="Specular light coefficient">
				<connection parent="Subtract_7" output="val"/>
			</input>
			<input name="size" type="float" storage="varying" value="15" description="Specular size.">
				<connection parent="Multiply_9" output="val"/>
			</input>
			<input name="N" type="normal" storage="varying" value="normalize(N)" description="Surface normal">
				<connection parent="Normalize_4" output="val"/>
			</input>
			<input name="I" type="vector" storage="varying" value="normalize(I)" description="Direction of viewer"/>
			<input name="category" type="string" storage="uniform" value="&quot;&quot;" description="Light categories accepted"/>
			<output name="Ci" type="color" storage="varying" description="Shaded color"/>
			<rsl_code>
		aov_specularcolor += $(Cspec);
		aov_specular += $(Ks) * phong_blinn( $(N), $(I), $(size), $(category));
        $(Ci) = aov_specularcolor * aov_specular;
							</rsl_code>
			<rsl_include>rsl_shrimp_shadingmodels.h						</rsl_include>
			<usage>Phong-Blinn specular term. The specular color value is passed to &quot;aov_specularcolor&quot;, while the specular value, to the &quot;aov_specular&quot; AOV presets. The &quot;category&quot; variable defines the light categories used for the &quot;illuminance&quot; construct of this block.						</usage>
		</block>
		<block id="Ridged3D_2" position_x="-12" position_y="0" author="rconstruct">
			<input name="p" type="point" storage="varying" value="P" description="point to sample fractal at">
				<connection parent="Transform" output="pp"/>
			</input>
			<input name="fwidth" type="float" storage="varying" value="sqrt(area(P))" description="Filter width for antialiasing"/>
			<input name="octaves" type="float" storage="uniform" value="6" description="Maximum octaves of noise"/>
			<input name="lacunarity" type="float" storage="uniform" value="5" description="Gap between successive frequencies"/>
			<input name="gain" type="float" storage="uniform" value="0.5" description="Controls the contrast of the fractal"/>
			<input name="offset" type="float" storage="uniform" value="2" description="Controls the multifractality"/>
			<input name="amplitude" type="float" storage="varying" value=".2" description="Amplitude of fractal"/>
			<output name="val" type="float" storage="varying" description="fractal value at p"/>
			<rsl_code>
	#define $(blockname)_$(val:type)
	#ifdef $(blockname)_float
		$(val) = $(amplitude) * Ridged( $(p), $(fwidth), $(octaves),
						$(lacunarity), $(offset), $(gain) );
	#else
		$(val) = $(amplitude) * $(val:type) (vector vRidged( $(p), $(fwidth),
					$(octaves), $(lacunarity), $(offset), $(gain) ) );
	#endif
	#undef $(blockname)_$(val:type)
																						</rsl_code>
			<rsl_include>rsl_shrimp_fractal.h																					</rsl_include>
			<usage>Ken Musgrave&apos;s 3 dimensional Ridged Multifractal function. Note that offset can change the scale of the output drastically.																					</usage>
		</block>
		<block id="Root block" position_x="13" position_y="7" author="" root="RIB" AOV_preview="1">
			<rib_statements>Attribute &quot;visibility&quot; &quot;integer diffuse&quot; [ 1 ]
Attribute &quot;visibility&quot; &quot;integer specular&quot; [ 1 ]
Attribute &quot;visibility&quot; &quot;integer transmission&quot; [ 1 ]
Attribute &quot;cull&quot; &quot;integer hidden&quot; [ 0 ]
Attribute &quot;cull&quot; &quot;integer backfacing&quot; [ 0 ]
			</rib_statements>
			<imager_statement/>
			<input name="Ci" type="color" storage="varying" shader_parameter="1" value="0" description="Incident ray colour">
				<connection parent="Add_10" output="val"/>
			</input>
			<input name="Oi" type="color" storage="varying" shader_parameter="1" value="1" description="Incident ray opacity"/>
			<input name="P" type="point" storage="varying" shader_parameter="1" value="P" description="Displaced surface position"/>
			<input name="N" type="normal" storage="varying" shader_parameter="1" value="N" description="Displaced surface shading normal"/>
			<input name="Cl" type="color" storage="varying" shader_parameter="1" value="0" description="Outgoing light ray colour"/>
			<input name="Ol" type="color" storage="varying" shader_parameter="1" value="1" description="Outgoing light ray opacity"/>
			<input name="Cv" type="color" storage="varying" shader_parameter="1" value="0" description="Attenuated ray colour"/>
			<input name="Ov" type="color" storage="varying" shader_parameter="1" value="1" description="Attenuated ray opacity"/>
			<input name="Cm" type="color" storage="varying" shader_parameter="1" value="0" description="Output pixel colour"/>
			<input name="Om" type="color" storage="varying" shader_parameter="1" value="1" description="Output pixel opacity"/>
			<input name="AOV" type="color" storage="varying" shader_parameter="1" value="1" description="AOV preview output"/>
			<rsl_code/>
			<rsl_include/>
			<usage/>
		</block>
		<block id="Subtract" position_x="1" position_y="-0" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val"/>
			<input name="B" type="float" storage="varying" value="1" description="2nd input" type_parent="val">
				<connection parent="CellContour_2" output="val"/>
			</input>
			<output name="val" type="float" storage="varying" description="val = A - B"/>
			<rsl_code>
		$(val) = $(A) - $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Note that unlike the operators in the Renderman shading language the result is always the same type as the inputs. Also both inputs must be of the same type. The operation is done in parallel for each component.																					</usage>
		</block>
		<block id="Subtract_5" position_x="0" position_y="10" author="rconstruct">
			<input name="A" type="float" storage="varying" value=".8" description="1st input" type_parent="val"/>
			<input name="B" type="float" storage="varying" value="1" description="2nd input" type_parent="val">
				<connection parent="GetCol_2" output="y"/>
			</input>
			<output name="val" type="float" storage="varying" description="val = A - B"/>
			<rsl_code>
		$(val) = $(A) - $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Note that unlike the operators in the Renderman shading language the result is always the same type as the inputs. Also both inputs must be of the same type. The operation is done in parallel for each component.																					</usage>
		</block>
		<block id="Subtract_6" position_x="-0" position_y="11" author="rconstruct">
			<input name="A" type="float" storage="varying" value=".42" description="1st input" type_parent="val">
				<connection parent="GetCol_2" output="y"/>
			</input>
			<input name="B" type="float" storage="varying" value=".42" description="2nd input" type_parent="val"/>
			<output name="val" type="float" storage="varying" description="val = A - B"/>
			<rsl_code>
		$(val) = $(A) - $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Note that unlike the operators in the Renderman shading language the result is always the same type as the inputs. Also both inputs must be of the same type. The operation is done in parallel for each component.																					</usage>
		</block>
		<block id="Subtract_7" position_x="2" position_y="10" author="rconstruct">
			<input name="A" type="float" storage="varying" value="1" description="1st input" type_parent="val"/>
			<input name="B" type="float" storage="varying" value="1" description="2nd input" type_parent="val">
				<connection parent="Divide_4" output="val"/>
			</input>
			<output name="val" type="float" storage="varying" description="val = A - B"/>
			<rsl_code>
		$(val) = $(A) - $(B);
																						</rsl_code>
			<rsl_include/>
			<usage>Note that unlike the operators in the Renderman shading language the result is always the same type as the inputs. Also both inputs must be of the same type. The operation is done in parallel for each component.																					</usage>
		</block>
		<block id="Transform" position_x="-12" position_y="2" author="rconstruct">
			<input name="p" type="point" storage="varying" value="P" description="Point, vector or normal to transform" type_parent="pp">
				<connection parent="p_2" output="P"/>
			</input>
			<input name="from_space" type="string" storage="uniform" value="&quot;camera&quot;" description="The coordinate system to transform from"/>
			<input name="to_space" type="string" storage="uniform" value="&quot;shader&quot;" description="The coordinate system to transform into"/>
			<input name="mmat" type="matrix" storage="varying" value="UND" description="Use this matrix instead of a predefined coordinate system"/>
			<output name="pp" type="point" storage="varying" description="The transformed point, vector or normal"/>
			<rsl_code>
	#ifdef TRANSFORM_ARGUMENTS
	#undef TRANSFORM_ARGUMENTS
	#endif

	#define mmat_$(mmat)
	#ifdef mmat_UND
		#define TRANSFORM_ARGUMENTS $(to_space)
	#else
		#define TRANSFORM_ARGUMENTS	$(mmat)
	#endif /* mmat_UND */

	#define $(blockname)_$(p:type) 1
	#ifdef $(blockname)_point
		$(pp) = transform( $(from_space), TRANSFORM_ARGUMENTS , $(p) );
	#elif $(blockname)_vector
		$(pp) = vtransform( $(from_space), TRANSFORM_ARGUMENTS , $(p) );
	#elif $(blockname)_normal
		$(pp) = ntransform( $(from_space), TRANSFORM_ARGUMENTS , $(p) );
	#endif /* $(blockname)_$(p:type) */
	#undef $(blockname)_$(p:type)
	
	#undef mmat_$(mmat)
	#undef TRANSFORM_ARGUMENTS
																						</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h																					</rsl_include>
			<usage>A block for the &quot;transform&quot;, &quot;vtransform&quot; and &quot;ntransform&quot; functions, to transform the supplied point &quot;P&quot;, vector &quot;V&quot; or normal &quot;N&quot; respectively, from the coordinate system &quot;fromspace&quot; to the coordinate system &quot;tospace&quot;, with &quot;fromspace&quot; defaulting to &quot;current&quot;. Note that &quot;current&quot; is implementation specific. Predefined coordinate systems are: &quot;current&quot;, &quot;object&quot;, &quot;shader&quot;, &quot;world&quot;, &quot;camera&quot;, &quot;screen&quot;, &quot;raster&quot; and &quot;NDC&quot;. A transformation matrix might be given instead of a &quot;tospace&quot; coordinate system. User defined coordinate systems can also be refered to.																					</usage>
		</block>
		<block id="Voronoi3D2F_2" position_x="-8" position_y="3" author="rconstruct">
			<input name="p" type="point" storage="varying" value="P" description="Point to sample Voronoi at">
				<connection parent="Multiply_2" output="val"/>
			</input>
			<input name="jitter" type="float" storage="varying" value="1" description="Jitter">
				<connection parent="Add_8" output="val"/>
			</input>
			<input name="dtype" type="float" storage="uniform" value="2" description="Distanc metric, see help"/>
			<output name="f1" type="float" storage="varying" description="Feature 1"/>
			<output name="f2" type="float" storage="varying" description="Feature 2"/>
			<output name="pos1" type="point" storage="varying" description="Position 1"/>
			<output name="pos2" type="point" storage="varying" description="Position 2"/>
			<rsl_code>
		/* initialize */
		$(f1) = 0; $(pos1) = point(0); $(f2) = 0; $(pos2) = point(0);
		voronoi_f1f2_3d( $(p), $(jitter), $(dtype), $(f1), $(f2),
						$(pos1), $(pos2) );
																						</rsl_code>
			<rsl_include>rsl_shrimp_fractal.h																					</rsl_include>
			<usage>3D Voronoi cell noise, 2 features version. When dtype = 0, distance metric is Tchebychev, when not 0, distance metric = Minkowski, being dtype, Minkowski&apos;s P parameter, with P = 1 as the Manhattan metric, P = 2, the Euclidian metric, and allowing higher orders of P. Note that as P increases, it tends towards the Tchebychev result.																					</usage>
		</block>
		<block id="Voronoi3D2F_4" position_x="-8" position_y="1" author="rconstruct">
			<input name="p" type="point" storage="varying" value="P" description="Point to sample Voronoi at">
				<connection parent="Multiply_3" output="val"/>
			</input>
			<input name="jitter" type="float" storage="varying" value="1" description="Jitter">
				<connection parent="Add_8" output="val"/>
			</input>
			<input name="dtype" type="float" storage="uniform" value="2" description="Distanc metric, see help"/>
			<output name="f1" type="float" storage="varying" description="Feature 1"/>
			<output name="f2" type="float" storage="varying" description="Feature 2"/>
			<output name="pos1" type="point" storage="varying" description="Position 1"/>
			<output name="pos2" type="point" storage="varying" description="Position 2"/>
			<rsl_code>
		/* initialize */
		$(f1) = 0; $(pos1) = point(0); $(f2) = 0; $(pos2) = point(0);
		voronoi_f1f2_3d( $(p), $(jitter), $(dtype), $(f1), $(f2),
						$(pos1), $(pos2) );
																						</rsl_code>
			<rsl_include>rsl_shrimp_fractal.h																					</rsl_include>
			<usage>3D Voronoi cell noise, 2 features version. When dtype = 0, distance metric is Tchebychev, when not 0, distance metric = Minkowski, being dtype, Minkowski&apos;s P parameter, with P = 1 as the Manhattan metric, P = 2, the Euclidian metric, and allowing higher orders of P. Note that as P increases, it tends towards the Tchebychev result.																					</usage>
		</block>
		<block id="p_2" position_x="-12" position_y="3" author="rconstruct">
			<output name="P" type="point" storage="varying" description="Surface position"/>
			<rsl_code>
    $(P) = P;
    																					</rsl_code>
			<rsl_include/>
			<usage>Note that in all shading contexts, &quot;P&quot; is the surface position, the only exception being volume shaders, in which &quot;P&quot; is the light ray origin. Also note that in imager shaders, &quot;P&quot; is the position of the pixel center in raster space, with the z coordinate being 0.																					</usage>
		</block>
	</network>
</shrimp>
