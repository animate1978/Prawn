<shrimp name="new_scene">
	<about/>
	<network>
		<block id="Bake" position_x="3" position_y="-0" author="rconstruct">
			<input name="bakefile" type="string" storage="uniform" value="&quot;/usr/tmp/example.bake&quot;" description="Baked map filename"/>
			<input name="ss" type="float" storage="varying" value="s" description="X coordinate">
				<connection parent="st" output="s"/>
			</input>
			<input name="tt" type="float" storage="varying" value="t" description="Y coordinate">
				<connection parent="st" output="t"/>
			</input>
			<input name="bdata" type="color" storage="varying" value="0" description="Data to bake" type_parent="bdataout">
				<connection parent="Multiply_3" output="val"/>
			</input>
			<input name="ascii" type="float" storage="varying" value="1" description="ASCII/binary file toggle"/>
			<output name="bdataout" type="color" storage="varying" description="Baked data"/>
			<rsl_code>
	
	#if RENDERER==aqsis
		bake( $(bakefile), $(ss), $(tt), $(bdata) );
		$(bdataout) = $(bdata);
		
	#elif RENDERER==_3delight
	/* default is to save in ASCII format */
	#define bakeformat_$(ascii)
	#ifdef bakeformat_1
		bake( $(bakefile), $(ss), $(tt), $(bdata) );
		$(bdataout) = $(bdata);
	#else
		bake( concat( $(bakefile), &quot;&amp;binary&quot;), $(ss), $(tt), $(bdata) );
		$(bdataout) = $(bdata);
	#endif /* bakeformat_$(ascii) */
	#undef bakeformat_$(ascii)
		
	#else
	/* bake() is only supported on Aqsis and 3delight */
		$(bdataout) = $(bdata);
	#endif /* RENDERER */
			
				</rsl_code>
			<rsl_include/>
			<usage>Bakes the supplied data channel into a bakefile. In 3Delight&apos;s case, you can force the baked file to be in binary format, instead of ASCII format, by toggling the ascii parameter, which is enabled (ascii on) by default. Check your renderer&apos;s documentation, since this function is isn&apos;t available in all renderers.			</usage>
		</block>
		<block id="Diffuse_2" position_x="-2" position_y="2" author="rconstruct">
			<input name="Cdiff" type="color" storage="varying" value="color(.5)" description="Diffuse color"/>
			<input name="Kd" type="float" storage="varying" value="1" description="The diffuse coefficient"/>
			<input name="norm" type="normal" storage="varying" value="normalize(N)" description="The surface normal"/>
			<input name="PP" type="point" storage="varying" value="P" description="Surface position, see usage"/>
			<input name="angle" type="float" storage="varying" value="PI/2" description="Cone angle, see usage"/>
			<input name="dtoggle" type="float" storage="uniform" value="0" description="Toggle 1 or 3 argument diffuse, see usage"/>
			<output name="Ci" type="color" storage="varying" description="The amount of diffuse light"/>
			<rsl_code>
		aov_surfacecolor += $(Cdiff);

		/* Pixie&apos;s diffuse() has 2 forms */
		#define $(blockname)_$(dtoggle)
		#if RENDERER == pixie &amp;&amp; defined $(blockname)_1
			aov_diffuse += $(Kd) * diffuse( $(PP), $(norm), $(angle) );
		#else
			aov_diffuse += $(Kd) * diffuse( $(norm) );
		#endif /* RENDERER */
		#undef $(blockname)_$(dtoggle)

		$(Ci) = aov_surfacecolor * aov_diffuse;
				</rsl_code>
			<rsl_include/>
			<usage>Lambertian Diffuse term. The diffuse color value is passed to the &quot;aov_surfacecolor&quot;, and the diffuse value to the &quot;aov_diffuse&quot; AOV presets. Pixie&apos;s diffuse shadeop has 2 forms, the first one with a single argument, with the surface normal &quot;N&quot;, the second form, with 3 arguments, allowing the surface position and angle (in radians) to be specified as well. The default cone angle is PI/2. The variable &quot;dtoggle&quot; toggles between the single argument &quot;diffuse&quot; (0), and the 3 arguments &quot;diffuse&quot; (1).			</usage>
		</block>
		<block id="Multiply" position_x="-4" position_y="-1" author="rconstruct">
			<input name="A" type="point" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Transform" output="pp"/>
			</input>
			<input name="B" type="point" storage="varying" multi="*" value="point(5)" description="2nd or subsequent inputs" type_parent="val"/>
			<output name="val" type="point" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
				</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.			</usage>
		</block>
		<block id="Multiply_3" position_x="1" position_y="-0" author="rconstruct">
			<input name="A" type="color" storage="varying" value="1" description="1st input" type_parent="val">
				<connection parent="Diffuse_2" output="Ci"/>
			</input>
			<input name="B" type="color" storage="varying" multi="*" value="1" description="2nd or subsequent inputs" type_parent="val">
				<connection parent="Turbulence3D" output="val"/>
			</input>
			<output name="val" type="color" storage="varying" description="val = A * B"/>
			<rsl_code>
		$(val) = $(A) * $(B);
				</rsl_code>
			<rsl_include/>
			<usage>All inputs must be of the same type. The operation is done in parallel for each component.			</usage>
		</block>
		<block id="Root block" position_x="5" position_y="1" author="" root="RIB" AOV_preview="1">
			<rib_statements>Attribute &quot;cull&quot; &quot;integer hidden&quot; 0
Attribute &quot;cull&quot; &quot;integer backfacing&quot; 0
Attribute &quot;sides&quot; &quot;integer doubleshaded&quot; 0
			</rib_statements>
			<imager_statement/>
			<input name="Ci" type="color" storage="varying" shader_parameter="1" value="0" description="Incident ray colour">
				<connection parent="Bake" output="bdataout"/>
			</input>
			<input name="Oi" type="color" storage="varying" shader_parameter="1" value="1" description="Incident ray opacity"/>
			<input name="P" type="point" storage="varying" shader_parameter="1" value="P" description="Displaced surface position"/>
			<input name="N" type="normal" storage="varying" shader_parameter="1" value="N" description="Displaced surface shading normal"/>
			<input name="Cl" type="color" storage="varying" shader_parameter="1" value="0" description="Outgoing light ray colour"/>
			<input name="Ol" type="color" storage="varying" shader_parameter="1" value="1" description="Outgoing light ray opacity"/>
			<input name="Cv" type="color" storage="varying" shader_parameter="1" value="0" description="Attenuated ray colour"/>
			<input name="Ov" type="color" storage="varying" shader_parameter="1" value="1" description="Attenuated ray opacity"/>
			<input name="Cm" type="color" storage="varying" shader_parameter="1" value="0" description="Output pixel colour"/>
			<input name="Om" type="color" storage="varying" shader_parameter="1" value="1" description="Output pixel opacity"/>
			<input name="AOV" type="color" storage="varying" shader_parameter="1" value="1" description="AOV preview output"/>
			<rsl_code/>
			<rsl_include/>
			<usage/>
		</block>
		<block id="Transform" position_x="-4" position_y="1" author="rconstruct">
			<input name="p" type="point" storage="varying" value="P" description="Point, vector or normal to transform" type_parent="pp">
				<connection parent="p" output="P"/>
			</input>
			<input name="from_space" type="string" storage="uniform" value="&quot;camera&quot;" description="The coordinate system to transform from"/>
			<input name="to_space" type="string" storage="uniform" value="&quot;shader&quot;" description="The coordinate system to transform into"/>
			<input name="mmat" type="matrix" storage="varying" value="UND" description="Use this matrix instead of a predefined coordinate system"/>
			<output name="pp" type="point" storage="varying" description="The transformed point, vector or normal"/>
			<rsl_code>
	#ifdef TRANSFORM_ARGUMENTS
	#undef TRANSFORM_ARGUMENTS
	#endif

	#define mmat_$(mmat)
	#ifdef mmat_UND
		#define TRANSFORM_ARGUMENTS $(to_space)
	#else
		#define TRANSFORM_ARGUMENTS	$(mmat)
	#endif /* mmat_UND */

	#define $(blockname)_$(p:type) 1
	#ifdef $(blockname)_point
		$(pp) = transform( $(from_space), TRANSFORM_ARGUMENTS , $(p) );
	#elif $(blockname)_vector
		$(pp) = vtransform( $(from_space), TRANSFORM_ARGUMENTS , $(p) );
	#elif $(blockname)_normal
		$(pp) = ntransform( $(from_space), TRANSFORM_ARGUMENTS , $(p) );
	#endif /* $(blockname)_$(p:type) */
	#undef $(blockname)_$(p:type)
	
	#undef mmat_$(mmat)
	#undef TRANSFORM_ARGUMENTS
				</rsl_code>
			<rsl_include>rsl_shrimp_helpers.h			</rsl_include>
			<usage>A block for the &quot;transform&quot;, &quot;vtransform&quot; and &quot;ntransform&quot; functions, to transform the supplied point &quot;P&quot;, vector &quot;V&quot; or normal &quot;N&quot; respectively, from the coordinate system &quot;fromspace&quot; to the coordinate system &quot;tospace&quot;, with &quot;fromspace&quot; defaulting to &quot;current&quot;. Note that &quot;current&quot; is implementation specific. Predefined coordinate systems are: &quot;current&quot;, &quot;object&quot;, &quot;shader&quot;, &quot;world&quot;, &quot;camera&quot;, &quot;screen&quot;, &quot;raster&quot; and &quot;NDC&quot;. A transformation matrix might be given instead of a &quot;tospace&quot; coordinate system. User defined coordinate systems can also be refered to.			</usage>
		</block>
		<block id="Turbulence3D" position_x="-2" position_y="-1" author="rconstruct">
			<input name="p" type="point" storage="varying" value="P" description="Point to sample turbulence at">
				<connection parent="Multiply" output="val"/>
			</input>
			<input name="fwidth" type="float" storage="varying" value="0" description="Filter width for antialiasing"/>
			<input name="octaves" type="float" storage="uniform" value="5" description="Maximum octaves of noise"/>
			<input name="lacunarity" type="float" storage="uniform" value="2.17" description="Gap in successive frequencies"/>
			<input name="gain" type="float" storage="uniform" value="0.5" description="Controls the contrast of the turbulence"/>
			<input name="amplitude" type="float" storage="varying" value="1" description="Amplitude of turbulence"/>
			<output name="val" type="color" storage="varying" description="Turbulence value at p"/>
			<rsl_code>
	#define $(blockname)_$(val:type)
	#ifdef $(blockname)_float
		$(val) = $(amplitude) * turbulence( $(p), $(fwidth), $(octaves),
					$(lacunarity), $(gain) );
	#else
		$(val) = $(amplitude) * $(val:type) ( vector vturbulence( $(p),
					$(fwidth), $(octaves), $(lacunarity), $(gain) ) );
	#endif
	#undef $(blockname)_$(val:type)
				</rsl_code>
			<rsl_include>rsl_shrimp_fractal.h			</rsl_include>
			<usage>3 dimensional turbulence fractal function with Perlin noise basis. Returns a result in the [0,1] range by default.			</usage>
		</block>
		<block id="p" position_x="-4" position_y="2" author="rconstruct">
			<output name="P" type="point" storage="varying" description="Surface position"/>
			<rsl_code>
    $(P) = P;
    			</rsl_code>
			<rsl_include/>
			<usage>Note that in all shading contexts, &quot;P&quot; is the surface position, the only exception being volume shaders, in which &quot;P&quot; is the light ray origin. Also note that in imager shaders, &quot;P&quot; is the position of the pixel center in raster space, with the z coordinate being 0.			</usage>
		</block>
		<block id="st" position_x="1" position_y="-1" author="rconstruct">
			<output name="s" type="float" storage="varying" description="S texture coordinate"/>
			<output name="t" type="float" storage="varying" description="T texture coordinate"/>
			<rsl_code>
    $(s) = s;
    $(t) = t;
    			</rsl_code>
			<rsl_include/>
			<usage>The surface texturing coordinates. The availability of these global variables in the different shading contexts is renderer specific.			</usage>
		</block>
	</network>
</shrimp>
